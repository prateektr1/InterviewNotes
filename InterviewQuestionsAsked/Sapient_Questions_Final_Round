Hashmap problem, Sorting in hashmap
============================================================================================================================
Need to write a program which will sort on basis of its values (in Java 8 and plus)

Ans: HashMap<String, Integer> temp
                = hm.entrySet()
                .stream()
                .sorted(Map.Entry.comparingByValue())
                .collect(Collectors.toMap(
                        Map.Entry::getKey,
                        Map.Entry::getValue,
                        (e1, e2) -> e1, LinkedHashMap::new));

        return temp;

Solution Using Java 8

============================================================================================================================
Class name shud be My code
Panel will give input – list of integers and output should be – true if list contains only odd numbers and false otherwise

Ans :
public static boolean checkIfOnlyOddNumbers(List<Integer> list)
    {
        System.out.println(list.stream().filter(a->a%2==0).count());
        return list.stream().filter(a->a%2==0).count()==0?true:false;
    }
===========================================================================================================================
What is relationship b/w hash code and equals
How do we calculate the has function
What is completable future.
what is the difference between future and completable future how is it different. Can I use both at the same place.
On the completable future if you created a chain and if we put .get, what will happen?
=========================================================================================================================
difference between a fail safe and fail fast iterator?

Iterators in Java are either fail fast or fail safe.
Iterators in Java provide facility to traverse/iterate over the Collection Objects

	Fail Fast Iterator	Fail Safe Iterator																							
																									
	Fail fast iterator immediately throws Concurrent Modification exception if we try to modify them while iterating over them	
  Fail Safe iterator dont throw exception if they are modfieid while we are trying to iterate over them																							
																									
																									
	Fail Fast Iterators Use Original collections while we iterate over them	
  Fail Safe Iterators use copy of the original collection when we try to traverse/ iterate over them																							
																									
	Fail fast iterator dont require any additional memory as they traverse over original collection	
  Fail Safe Iterator requires extra memory as extra memory is required to create a copy of the collection																							
==========================================================================================================================
In hash map There are multiple threads that are accessing it and then. 
While one thread is accessing something another thread is trying to update it what happens then.

HashMap is not by default Thread Safe so in this case we will get ConcurrentModificationException, but if its a concurrent
Hash Map then we wont get any concurrent modification exception, as for reads it allows multiple threads for writes the concept 
of segment locking will come in picture

===================================================================================================================
Sorting algorithms you are aware of, and which one Java uses?


Timsort is used in Java
Bubble Sort
Merge Sort
Insertion sort
Quick Sort

=============================================================================================================================
How does quick sort works ?

HashMap is Not thread safe by default
While one thread holds on to the lock, no other thread can use the collection. Also, performing concurrent operation 
is not allowed on hashmap therefore if we try to update a hashmap while iterating over it, 
we will receive ConcurrentModificationException

The ConcurrentHashMap allows full concurrency for reads, meaning that any given number of threads can read the 
same key simultaneously. 
That also means that reads don't block and are not blocked by write operations.
===========================================================================================================================
Need of optional in java, why it used for ?
Optional class has been introduced In java 8 to avoid null pointer exception

The Optional class in Java 8 is a container object which is used to contain a value that might or might not be present. 
It was introduced as a way to help reduce the number of NullPointerExceptions that occur in Java code. 
It is a part of the java. util package and was added to Java as part of Java 8

Optional is used to reduce the number of null checks

===========================================================================================================================
GOF patterns – need to explain 2-3
Diff b/w builder and factory and when would you use each?
How do you maintain ordering of your messages in kafka
SQL – query problem – snap – find average salary of each department
Can you convert (the sql problem) to java JPA
=====================================================================================================================
What type of dependency injection you are working in spring , and which one is preferred

There are 2 types of dependency injection in Java

1) Constructor Injection
2) Setter Injection

The Spring team generally advocates constructor injection, as it lets you implement application components 
as immutable objects and ensures that required dependencies are not null . 

Furthermore, constructor-injected components are always returned to the client (calling) code in a fully initialized state.
=======================================================================================================================
Ques :  I have two components A and B that I'm initialising here let me know what will happen in this case.
you can draw out you can write a there's a microservice A which depends on microservice B, This is calling Microservice B and then B is calling C. 
and microservice B is not working properly there are some issues that are happening 
So what happens in this case and how you can improve the this micro service arrangement. 
(So you have three microservices where let there's a dependency between them and one of them is not working
well because of which your entire throughput and latency is getting affected now what are the things 
that you can implement in this particular microservice pattern that the microservices pattern that you can talk
about that will improve this.) so in this particular A, B and C where and all will you have your circuit breaker code.


Ans :  Circuit Breaker Design Pattern in Code so that we have a fallback method which can run when some service is not running
It can be done using hysterix or resilience 4j, hysterix is outdated so mostly resilience 4j is used

==================================================================================================================================================================
What Circuit breaker you are aware of and how would you implement it ( code wise)
Have you worked orchestrator, what is use case?
difference between orchestrator and choreography (pros and cons of each)
aware of domain driven design
aware of OAuth – what is client credentials in Oauth2
spring security and its class
what is purpose if JWT (why you would send something like as a header payload and signature when you can just send the information in some other way what is the reason I'm using a jwt token.) Ans – (to maintain the integrity you have a signature so that later on if somebody tampers with it you know that OK something has happened to the payload or something like that that's why you have the signature)

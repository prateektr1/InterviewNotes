We use Spring Framework to Instantiate beans and wire dependencies // known as Dependency Injection
Spring IoC (Inversion of Control) Container is the core of Spring Framework. It creates the objects, configures and assembles their dependencies, manages their entire life cycle. The Container uses Dependency Injection(DI) to manage the components that make up the application.
// Inversion of control means the responsibility of creation of objects goes to the Spring framework (Mostly using the @Autowire annotation), not like the class which 
has the object creating the object

There are 2 types of IOC containers

1) Bean Factory
2) Application Context

bean factory is mostly used by low memory applications like mobile phones

The configuration for application context can be defined in 2 ways

1) @Configuration annotation
2) using configuration.xml file

@Component means this is something which Spring needs to manage

@ComponentScan is used to tell the Spring Container where to scan for packages which contain the beans

Normally in Spring we have to specify the package which needs to be scanned to figure out which packages need to be scanned for beans, although
Spring Boot makes the process of Component scan easier, it will check for @SpringBootApplication annotation , what package this annotation lies in
Spring boot will go and scan that package for the beans

Spring beans have 4 scopes

Singleton : One instance per Spring Context
prototype : New Bean whenever requested
request : 1 bean per HTTP request. Web aware Spring Application Context
session : 1 bean per HTTP session. Web aware Spring Application Context

The default scope of a bean is singleton


By default Spring beans are not Thread Safe

Types of dependency injections in Spring 

Initially Spring framework used to support configuration only via xml, but later on annotation based config was introduced


Setter Injection
Constructor injection

Whenever we get bean not found exception, these could be 2 main reasons
--> @Component Missing
--> @ComponentScan not defined properly

In component scan there might be more than 1 matching components that leads to
NoUniqueBeanException

In this case @Primary annotation helps, as it marks a bean as primary and give it preference while bean matching
@Qualifier also helps see the example below

@Component
public class ComplexAlgorithmImpl{

@Autowired
@Qualifier("main algorithm)
private SortAlgorithm sortAlgorithm;

@Component
@Qualifier("main algorithm")
public class BubbleSortAlgorithm implements SortAlgorithm

Spring has a number of Projects

Spring Web
Spring JDBC
Spring web flux
Spring Boot
Spring Cloud
Spring BATCH
Spring HATEOS
Spring Integration

===============================================================================================================================

                                                             Spring Boot Notes
                                                          ========================

Spring boot helps to automate the configuration part of spring and create production ready applications quickly
There are a lot of starter projects in Spring Boot
Spring Boot Actuator helps to record metrics in Spring boot
Embedded server is tomcat in Spring Boot, although as per our wish we can use a server like jetty also

A deployable server is always embedded in the Spring Boot Deployable Jar
By Default server in Spring boot is tomcat, although it also supports jetty and undertow

Server is embedded as a part of the deployable JAR itself

Although Properties for an application can be defined in application.properties but there is also a way to define the custom properties in an 
application using the annotation @ConfigurationProperties annotation

Based on the profile the appropriate file is picked up

application-dev.properties
application-qa.properties
application-prod.properties

H2 database is an in memory database that is used by Spring

================================================================================================================================

Sppring Boot Testing

The most popular framework for Mocking in Spring is Mockito

Either use Mockito.mock or use @Mock annotation to create a mock object

Example of @Mock and @InjectMocks annotations

@RunWith(MockitoJUnitRunner.class)
public class SomeBusinessMockAnnotationTest
{
   @Mock
   DataService dataservicemock

   @InjectMocks
   SomeBusinessImpl businessImpl

   // @Mock is used to create a mock of data service
   // @InjectMocks is used to insert dataServiceMock in BusinessImpl
}

===============================================================================

Spring security is used to secure our applications

To implement the most basic form of your application just include the spring-boot-starter-security dependency in your application

Normally the Spring security will generate its own password but if you want your own username and password you can define it in the
application.properties file like this

spring.security.user.name=<Your Username>
spring.security.user.password=<Your Password>

How to configure your own Authentication in Spring Security(Rather than using the default one)

Extend WSCA in custom class and use @Enablewebsecurity annotation(WSCA : Web Security Config Adaptor)
override configure(AMB) method
configure type of auth,user,pass and role
This will create and configure a new AM and now SS will use this AM instead of default one(AM - Authentication Manager)

Difference between Authorization and Authentication

Authentication : Who are you
Authrization : What do you want

Okta , OAuth, OIDC three important things in Spring Security

OAuth is only for Authrization
Okta is a one stop solution for both Authentication and Authorization

Okta is a Company that provides a solution https://www.okta.com/

It has set of endpoints created for us if we configure our application in OKTA it gives is keys password token etc

OAuth 2.0 uses access tokens

JWT is in the form of x.y.z

x is header
y is payload
z is signature

Header has algorithm and token type like below
{

  "alg":"HS256",
  "typ":"JWT"
}

Payload contains the claims of the token

Signature is base64(Header)+base64(Payload)+256 bit secret key

Claims in JWT are the key value pairs



==================================================================================================



